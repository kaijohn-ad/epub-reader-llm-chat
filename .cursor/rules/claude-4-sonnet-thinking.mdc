---
description: 
globs: 
alwaysApply: true
---
# Claude-4-sonnet思考モデル開発ルール

## 思考プロセス必須要件
**すべてのコード生成・修正において、思考プロセスを明示すること**

### 実装前の思考フレームワーク
1. **要件分析思考**
   - 機能要件の深層理解
   - 非機能要件の推論
   - エッジケースの予測

2. **設計判断思考**
   - 複数の実装アプローチの検討
   - 選択したアプローチの論理的根拠
   - トレードオフの明確化

3. **最適化思考**
   - パフォーマンス影響の分析
   - メモリ効率の考慮
   - 将来の拡張性の評価

## コード品質基準
### TypeScript厳格モード
```typescript
// ✅ 良い例: 思考プロセス付きの実装
/**
 * EPUB選択テキストをチャット用に変換
 * 
 * 思考プロセス:
 * 1. 選択テキストの前後コンテキストが重要
 * 2. LLMが理解しやすい形式に構造化
 * 3. 長すぎるテキストは要約が必要
 */
interface TextSelectionContext {
  selectedText: string;
  beforeContext: string;
  afterContext: string;
  chapterTitle: string;
  pageNumber: number;
}
```

### エラーハンドリング思考
```typescript
// ✅ 推論に基づくエラーハンドリング
/**
 * 思考: EPUB読み込みで予想されるエラーパターン
 * 1. ファイル形式不正 → ユーザーに明確なフィードバック
 * 2. ファイルサイズ過大 → 進捗表示付き読み込み
 * 3. 破損ファイル → 部分読み込み試行
 */
const handleEpubLoadError = (error: Error) => {
  // 実装...
}
```

## パフォーマンス最適化思考
### レンダリング最適化
- **仮想化が必要な理由**: 大容量EPUB、長いチャット履歴
- **メモ化の判断基準**: 再計算コストが高い処理
- **遅延読み込みの適用**: 初期表示速度重視

### メモリ効率化
- **WeakMap使用の判断**: オブジェクト参照の自動GC
- **クリーンアップの必要性**: イベントリスナー、タイマー
- **キャッシュ戦略**: LRU実装による制限付きキャッシュ

## アクセシビリティ思考設計
### 包括的設計の推論
```typescript
// ✅ アクセシビリティを考慮した設計思考
/**
 * 思考: 読書アプリのアクセシビリティ要件
 * 1. 視覚障害: スクリーンリーダー対応、高コントラスト
 * 2. 運動障害: キーボードナビゲーション完全対応
 * 3. 認知負荷軽減: 一貫したUI、明確なフィードバック
 */
interface AccessibilityProps {
  'aria-label': string;
  'aria-describedby'?: string;
  role?: string;
  tabIndex?: number;
}
```

## テスト思考戦略
### テストケース設計思考
1. **クリティカルパス優先**: ユーザージャーニーの核心部分
2. **エッジケース網羅**: 境界値、異常系の体系的テスト
3. **統合テスト重視**: コンポーネント間の相互作用

### モック戦略思考
```typescript
// ✅ 思考に基づくモック設計
/**
 * 思考: Grok API モックの必要性
 * 1. レート制限回避 → テスト実行速度向上
 * 2. 一貫した応答 → テスト結果の安定性
 * 3. エラーシナリオ → 異常系テストの網羅
 */
const mockGrokAPI = {
  // 実装...
}
```

## 実装コメント規則
### JSDoc + 思考プロセス
```typescript
/**
 * EPUB章移動機能
 * 
 * @param chapterIndex - 移動先章番号
 * @returns Promise<void>
 * 
 * 実装思考:
 * 1. 現在位置保存 → 戻るボタン機能のため
 * 2. アニメーション → ユーザー体験向上
 * 3. エラー回復 → 無効章への移動試行時
 * 
 * パフォーマンス考慮:
 * - 章データの遅延読み込み
 * - 前後章のプリロード
 */
async function navigateToChapter(chapterIndex: number): Promise<void> {
  // 実装...
}
```

## 継続的改善思考
### コードレビュー観点
1. **論理的根拠の検証**: なぜその実装を選んだか
2. **代替案の検討**: 他にどんなアプローチがあったか
3. **将来性の評価**: 機能追加時の拡張しやすさ

### リファクタリング判断
- **複雑性の閾値**: サイクロマティック複雑度 > 10
- **重複コードの基準**: 3箇所以上の同一ロジック
- **依存関係の整理**: 循環依存の検出と解消
