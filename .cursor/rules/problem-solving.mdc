---
description: 
globs: 
alwaysApply: true
---
# 問題解決・トラブルシューティング ルール

## 🔍 Web検索によるベストプラクティス調査

### 実装方法に悩んだ場合
**必ずWeb検索を実行してベストプラクティスを調査してから実装を決定すること**

#### 検索対象の優先順位
1. **公式ドキュメント**: 該当技術の最新公式ドキュメント
2. **GitHub Issues**: 実際の問題解決事例
3. **Stack Overflow**: 開発者コミュニティの知見
4. **技術ブログ**: 実装パターン・ベストプラクティス
5. **npm/パッケージ**: 代替ライブラリの調査

#### 検索キーワード例
```
// React + TypeScript 関連
"React TypeScript best practices 2024"
"React hook custom implementation pattern"
"React performance optimization techniques"

// EPUB.js 関連  
"epub.js text selection implementation"
"epub.js performance optimization"
"epub.js error handling best practices"

// Grok API 関連
"xAI Grok API streaming implementation"
"Grok API rate limiting handling"
"LLM API error recovery patterns"

// Supabase 関連
"Supabase TypeScript integration patterns"
"Supabase real-time subscription best practices"
"Supabase security best practices"
```

### エラー発生時の調査手順

#### 1. エラーメッセージの詳細調査
```
Web検索クエリ例:
"[完全なエラーメッセージ]"
"[エラーメッセージ] React TypeScript"
"[エラーメッセージ] epub.js solution"
```

#### 2. 技術スタック固有の解決策検索
```
// TypeScript エラー
"TypeScript [エラーコード] fix"
"TypeScript strict mode [エラー内容]"

// React エラー
"React [エラーメッセージ] solution 2024"
"React hook [エラー内容] fix"

// Vite ビルドエラー
"Vite [エラーメッセージ] resolution"
"Vite TypeScript [エラー内容]"
```

#### 3. パフォーマンス問題の調査
```
Web検索クエリ例:
"React performance optimization [具体的な問題]"
"epub.js memory leak prevention"
"large file handling web application"
"React virtualization best practices"
```

## 🧠 思考プロセス付き問題解決

### 検索結果の評価フレームワーク
```typescript
/**
 * Web検索結果の評価思考プロセス
 * 
 * 🔍 検索結果分析:
 * 1. 情報の信頼性: 公式 > 有名開発者 > 一般ブログ
 * 2. 更新日時: 2024年以降を優先、古い情報は要注意
 * 3. 技術スタック適合性: 現プロジェクトとの互換性
 * 4. コミュニティ評価: GitHub Stars、Stack Overflow投票数
 * 5. 実装複雑性: 保守性・可読性への影響
 * 
 * 📊 実装判断基準:
 * - セキュリティリスクの評価
 * - パフォーマンスへの影響
 * - 将来の拡張性・保守性
 * - テストのしやすさ
 */
```

### 複数解決策の比較検討
```typescript
/**
 * 解決策比較の思考プロセス
 * 
 * 🤔 代替案検討:
 * 1. 解決策A: [具体的な手法]
 *    - メリット: [利点の詳細]
 *    - デメリット: [欠点・リスク]
 *    - 実装コスト: [時間・複雑性]
 * 
 * 2. 解決策B: [別の手法]
 *    - メリット: [利点の詳細] 
 *    - デメリット: [欠点・リスク]
 *    - 実装コスト: [時間・複雑性]
 * 
 * 🎯 選択理由:
 * [論理的根拠に基づく最終判断]
 */
```

## 🚨 緊急時の迅速対応

### クリティカルエラーの対応順序
1. **即座にWeb検索**: エラーメッセージで完全一致検索
2. **公式リポジトリ確認**: GitHub Issues で既知の問題か確認
3. **ワークアラウンド検索**: 一時的な回避策を調査
4. **根本解決策検索**: 長期的な解決方法を調査

### 検索効率化のテクニック
```
// 効果的な検索クエリ構成
"[技術名] [具体的な問題] [年度]"
"[エラーメッセージ] site:github.com"
"[技術名] best practices site:stackoverflow.com"
"[ライブラリ名] [機能名] example implementation"

// 除外検索で関連性向上
"React hooks -class -legacy"
"TypeScript strict -javascript"
"epub.js -python -java"
```

## 📚 信頼できる情報源リスト

### 技術別推奨サイト
```
React / TypeScript:
- react.dev (公式)
- typescriptlang.org (公式)
- kentcdodds.com (Kent C. Dodds)
- overreacted.io (Dan Abramov)

Web標準・パフォーマンス:
- web.dev (Google)
- developer.mozilla.org (MDN)
- caniuse.com (ブラウザ対応状況)

ライブラリ固有:
- github.com/futurepress/epub.js (epub.js公式)
- supabase.com/docs (Supabase公式)
- tailwindcss.com/docs (Tailwind CSS公式)
```

### GitHub検索活用法
```
// リポジトリ内検索
"[機能名] in:readme stars:>100"
"[エラーメッセージ] in:issues is:closed"
"[実装パターン] language:typescript"

// 実装例検索
"epub.js text selection" filename:*.tsx
"grok api streaming" language:javascript
"supabase realtime" filename:*.ts
```

## Windows 11固有の問題解決

### Windows環境特有のエラー対応
```typescript
// ✅ Windows特有のエラーハンドリング
const handleWindowsSpecificErrors = (error: Error) => {
  if (error.message.includes('ENOTFOUND')) {
    console.error('DNS解決エラー: インターネット接続を確認してください');
  }
  
  if (error.message.includes('EACCES')) {
    console.error('アクセス権限エラー: 管理者権限で実行するか、ファイル権限を確認してください');
  }
  
  if (error.message.includes('EMFILE')) {
    console.error('ファイル監視制限: ulimitの設定を確認してください');
  }
  
  if (error.message.includes('EPERM')) {
    console.error('操作権限エラー: ウイルススキャンソフトが干渉している可能性があります');
  }
};
```

### Windows固有の検索クエリ
```
// Windows環境でのトラブルシューティング
"[エラーメッセージ] Windows 11"
"Node.js Windows path error"
"npm install Windows permission denied"
"Vite dev server Windows firewall"
"React build Windows long path names"
```

## 🔄 継続的学習・改善

### 検索履歴の活用
- **解決済み問題**: 同様の問題再発時の迅速対応
- **ベストプラクティス蓄積**: プロジェクト固有の知見構築
- **技術動向把握**: 新しい解決手法の発見

### 検索結果の文書化
```typescript
/**
 * 問題解決記録テンプレート
 * 
 * 問題: [具体的な問題の説明]
 * 検索キーワード: "[使用した検索クエリ]"
 * 参考資料: [URL、GitHub Issue等]
 * 解決策: [採用した解決方法]
 * 理由: [選択した論理的根拠]
 * 効果: [実装後の結果・改善点]
 */
```

## 実際の問題解決例

### EPUB.js テキスト選択の問題
```typescript
/**
 * 問題: iframe内でのテキスト選択が検出できない
 * 
 * 検索クエリ: "epub.js text selection iframe detection"
 * 参考: GitHub Issue #1234, Stack Overflow answer
 * 
 * 解決策: rendition.on('selected') イベント使用
 * 理由: 公式推奨の方法で、ブラウザ間の互換性が高い
 */
rendition.on('selected', (cfiRange, contents) => {
  const selection = contents.window.getSelection();
  const selectedText = selection.toString();
  handleTextSelection(selectedText, cfiRange);
});
```

### Grok API ストリーミングの実装
```typescript
/**
 * 問題: Server-Sent Events形式の応答処理
 * 
 * 検索クエリ: "fetch streaming response javascript async generator"
 * 参考: MDN Web API documentation, OpenAI cookbook
 * 
 * 解決策: ReadableStream + async generator
 * 理由: メモリ効率が良く、リアルタイム表示可能
 */
```

---

**重要**: Web検索は実装判断の重要な情報源ですが、必ず複数の情報源を比較検討し、プロジェクトの要件・制約に適合するかを慎重に評価してから採用してください。
