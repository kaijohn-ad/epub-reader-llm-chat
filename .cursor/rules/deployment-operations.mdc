---
description: 
globs: 
alwaysApply: true
---
# デプロイメント・運用管理ルール

## 🚀 Vercel デプロイメント戦略

### プロダクション環境設定
```typescript
/**
 * Vercel最適化設定の思考プロセス
 * 
 * 🤔 デプロイ戦略:
 * 1. 静的サイト生成 vs サーバーサイドレンダリング判断
 * 2. Edge Functions活用による応答速度向上
 * 3. 環境変数の安全な管理戦略
 * 4. プレビューデプロイメントの活用
 */

// ✅ vercel.json 最適化設定
{
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "installCommand": "npm ci",
  "framework": "vite",
  "functions": {
    "src/api/*.ts": {
      "runtime": "nodejs18.x"
    }
  },
  "headers": [
    {
      "source": "/api/(.*)",
      "headers": [
        {
          "key": "Access-Control-Allow-Origin",
          "value": "*"
        }
      ]
    }
  ]
}
```

### 環境変数管理
```typescript
// ✅ 本番環境での環境変数設定思考
/**
 * 思考: 環境変数のセキュリティ階層化
 * 1. 公開情報: VITE_APP_NAME など
 * 2. 機密情報: API キー、データベース認証情報
 * 3. 環境別設定: 開発・ステージング・本番の分離
 */

// Vercel環境変数設定
const requiredEnvVars = [
  'VITE_GROK_API_KEY',      // Grok API認証
  'VITE_SUPABASE_URL',      // Supabase接続URL
  'VITE_SUPABASE_ANON_KEY', // Supabase匿名キー
] as const;

// 環境変数検証関数
const validateEnvironmentVariables = () => {
  const missing = requiredEnvVars.filter(
    key => !import.meta.env[key]
  );
  
  if (missing.length > 0) {
    throw new Error(
      `Missing required environment variables: ${missing.join(', ')}`
    );
  }
};
```

## 🔄 CI/CD パイプライン

### GitHub Actions ワークフロー
```yaml
# ✅ .github/workflows/deploy.yml
name: Deploy to Vercel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type check
        run: npm run type-check
        
      - name: Run tests
        run: npm run test:coverage
        
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Build application
        run: npm run build
        
      - name: Deploy to Vercel
        if: github.ref == 'refs/heads/main'
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
```

### デプロイメント前チェックリスト
```typescript
/**
 * デプロイ前品質ゲート
 * 
 * 必須チェック項目:
 * 1. TypeScript型チェック成功
 * 2. 95%以上テストカバレッジ
 * 3. Lighthouse スコア 90点以上
 * 4. セキュリティ脆弱性スキャン
 * 5. 環境変数設定確認
 */

const deploymentChecklist = {
  typeCheck: () => runCommand('npm run type-check'),
  testCoverage: () => runCommand('npm run test:coverage'),
  lighthouseScore: () => runCommand('npm run lighthouse'),
  securityScan: () => runCommand('npm audit'),
  envValidation: () => validateEnvironmentVariables(),
} as const;
```

## 📊 モニタリング・ログ管理

### パフォーマンス監視
```typescript
/**
 * 本番環境パフォーマンス監視の思考プロセス
 * 
 * 🔍 監視対象:
 * 1. Core Web Vitals (LCP, FID, CLS)
 * 2. API レスポンス時間
 * 3. エラー発生率
 * 4. ユーザー行動分析
 */

// ✅ Real User Monitoring (RUM) 実装
const initializeRUM = () => {
  // Web Vitals 測定
  import('web-vitals').then(({ getCLS, getFID, getLCP }) => {
    getCLS(console.log);
    getFID(console.log);
    getLCP(console.log);
  });
  
  // エラー追跡
  window.addEventListener('error', (event) => {
    console.error('Runtime Error:', {
      message: event.message,
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno,
    });
  });
};
```

### エラー追跡・アラート
```typescript
// ✅ エラーログ集約システム
/**
 * 思考: エラー分類とアラート戦略
 * 1. クリティカルエラー → 即座にアラート
 * 2. 一般的エラー → 日次レポート
 * 3. パフォーマンス劣化 → 週次分析
 */

interface ErrorLog {
  level: 'error' | 'warn' | 'info';
  message: string;
  stack?: string;
  userAgent: string;
  url: string;
  timestamp: Date;
  userId?: string;
}

const logError = (error: Error, context: Partial<ErrorLog>) => {
  const errorLog: ErrorLog = {
    level: 'error',
    message: error.message,
    stack: error.stack,
    userAgent: navigator.userAgent,
    url: window.location.href,
    timestamp: new Date(),
    ...context,
  };
  
  // Supabase に送信（非同期）
  supabase.from('error_logs').insert(errorLog);
};
```

## 🔒 セキュリティ運用

### セキュリティヘッダー設定
```typescript
// ✅ vercel.json セキュリティ設定
/**
 * 思考: セキュリティヘッダーの必要性
 * 1. XSS攻撃防止 → Content-Security-Policy
 * 2. クリックジャッキング防止 → X-Frame-Options
 * 3. HTTPS強制 → Strict-Transport-Security
 */

const securityHeaders = [
  {
    "key": "X-DNS-Prefetch-Control",
    "value": "on"
  },
  {
    "key": "Strict-Transport-Security",
    "value": "max-age=63072000; includeSubDomains; preload"
  },
  {
    "key": "X-Content-Type-Options",
    "value": "nosniff"
  },
  {
    "key": "X-Frame-Options",
    "value": "DENY"
  },
  {
    "key": "X-XSS-Protection",
    "value": "1; mode=block"
  },
  {
    "key": "Referrer-Policy",
    "value": "origin-when-cross-origin"
  }
];
```

### 定期セキュリティ監査
```typescript
// ✅ 自動セキュリティチェック
/**
 * 週次実行のセキュリティ監査
 * 
 * チェック項目:
 * 1. 依存関係の脆弱性スキャン
 * 2. API キーの有効期限確認
 * 3. 不審なアクセスパターン検出
 * 4. HTTPS証明書有効性確認
 */

const securityAudit = {
  vulnerabilityScan: () => runCommand('npm audit --audit-level high'),
  dependencyCheck: () => runCommand('npm outdated'),
  apiKeyValidation: async () => {
    // Grok API キー有効性確認
    const isValidGrokKey = await validateGrokApiKey();
    return { grokApi: isValidGrokKey };
  },
  httpsCheck: () => {
    // SSL証明書確認
    return fetch(window.location.origin).then(res => res.ok);
  },
};
```

## 📈 スケーリング戦略

### パフォーマンス最適化
```typescript
/**
 * スケーリング時の思考プロセス
 * 
 * 🎯 最適化ポイント:
 * 1. CDN活用による静的アセット配信
 * 2. コード分割による初期ロード時間短縮
 * 3. キャッシング戦略の最適化
 * 4. データベースクエリ最適化
 */

// ✅ コード分割戦略
const lazyLoadComponents = {
  EpubReader: lazy(() => import('@/components/Reader/EpubReader')),
  ChatContainer: lazy(() => import('@/components/Chat/ChatContainer')),
  AdvancedSettings: lazy(() => import('@/components/Settings/AdvancedSettings')),
};

// ✅ 静的アセット最適化
const optimizeAssets = {
  images: 'WebP形式での配信、適切なサイズ調整',
  fonts: 'フォント表示の最適化、サブセット化',
  scripts: 'Tree shaking、コード分割',
  styles: 'Critical CSS の抽出',
};
```

### キャパシティプランニング
```typescript
/**
 * ユーザー増加に対する計画的対応
 * 
 * 🔄 スケーリング指標:
 * 1. 同時接続ユーザー数
 * 2. API呼び出し頻度
 * 3. データベース負荷
 * 4. CDN転送量
 */

const scalingThresholds = {
  concurrentUsers: 1000,     // 同時ユーザー数上限
  apiCallsPerMinute: 10000,  // API呼び出し頻度
  databaseConnections: 100,  // DB接続数上限
  cdnBandwidth: '1TB/month', // CDN転送量上限
} as const;
```

---

**重要**: 本番環境では常にセキュリティとパフォーマンスを最優先に考え、ユーザーデータの保護と最適な体験の提供を心がけてください。
